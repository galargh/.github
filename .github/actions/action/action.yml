name: action
description: Perform action

inputs:
  jobs-url:
    description: "Jobs URL"
    required: false
    default: ${{ github.event.workflow_run.jobs_url }}
  logs-url:
    description: "Logs URL"
    required: false
    default: ${{ github.event.workflow_run.logs_url }}
  artifacts-url:
    description: "Artifacts URL"
    required: false
    default: ${{ github.event.workflow_run.artifacts_url }}
  artifact-names:
    description: "A comma-separated list of artifact names to download"
    required: false
    default: ''

outputs:
  jobs:
    description: "Jobs"
    value: ${{ steps.jobs.outputs.jobs || '{}' }}
  logs:
    description: "Logs"
    value: ${{ steps.logs.outputs.logs || '{}' }}
  artifacts:
    description: "Artifacts"
    value: ${{ steps.artifacts.outputs.artifacts || '{}' }}

runs:
  using: "composite"
  steps:
    - id: jobs
      if: inputs.jobs-url != ''
      env:
        GH_TOKEN: ${{ github.token }}
        JOBS_URL: ${{ inputs.jobs-url }}
      run: |
        eof="EOF$RANDOM"

        jobs="$(gh api "$JOBS_URL")"

        echo "jobs<<$eof" >> $GITHUB_OUTPUT
        jq -c '.jobs | map({"key": .name, "value": (. | .steps = (.steps | map({"key": .name, "value": .}) | from_entries))}) | from_entries' <<< "$jobs" >> $GITHUB_OUTPUT
        echo "$eof" >> $GITHUB_OUTPUT
      shell: bash
    - id: logs
      if: inputs.logs-url != ''
      env:
        GH_TOKEN: ${{ github.token }}
        LOGS_URL: ${{ inputs.logs-url }}
      run: |
        eof="EOF$RANDOM"

        logs="{}"
        zip="$(mktemp)"
        dir="$(mktemp -d)"
        gh api "$LOGS_URL" > "$zip"
        unzip "$zip" -d "$dir"
        while read file; do
          key="$(jq -nr '$file | sub($dir;"") | sub("/\\d+_";"/") | sub("^/";"") | sub("\\.txt";"")' --arg dir "$dir" --arg file "$file")"
          value="$(jq -Rs 'split("\r\n") | map(select(. == "" | not)) | map(split(" ")) | map({"time": .[0], "message": .[1:] | join(" ")})' "$file")"
          logs="$(jq -n '$logs | .[$key] = $value' --arg key "$key" --argjson value "$value" --argjson logs "$logs")"
        done <<< "$(find "$dir" -name "*.txt")"
        rm -rf "$dir" "$zip"

        echo "logs<<$eof" >> $GITHUB_OUTPUT
        jq -c '.' <<< "$logs" >> $GITHUB_OUTPUT
        echo "$eof" >> $GITHUB_OUTPUT
      shell: bash
    - id: artifacts
      if: inputs.artifacts-url != ''
      env:
        GH_TOKEN: ${{ github.token }}
        ARTIFACTS_URL: ${{ inputs.artifacts-url }}
        ARTIFACT_NAMES: ${{ inputs.artifact-names }}
      run: |
        eof="EOF$RANDOM"

        raw_artifacts="$(gh api "$ARTIFACTS_URL")"
        echo "$raw_artifacts" | jq -c '.'

        artifacts="{}"
        while read name; do
          artifact="$(jq -n '$artifacts | .artifacts | map(select(.name == $name)) | .[0]' --arg name "$name" --argjson artifacts "$raw_artifacts")"
          jq -n "$artifact" --argjson artifact "$artifact"
          url="$(jq -nr '$artifact | select(.name as $name | $names | split(",") | index($name)) | .archive_download_url' --argjson artifact "$artifact" --arg names "$ARTIFACT_NAMES")"
          if [[ -n "$url" ]]; then
            zip="$(mktemp)"
            dir="$(mktemp -d)"
            gh api "$url" > "$zip"
            unzip "$zip" -d "$dir"
            files="{}"
            while read file; do
              key="$(jq -nr '$file | sub($dir;"") | sub("^/";"")' --arg dir "$dir" --arg file "$file")"
              value="$(jq '.' "$file" 2> /dev/null || jq -Rs '.' "$file")"
              files="$(jq -n '$files | .[$key] = $value' --arg key "$key" --argjson value "$value" --argjson files "$files")"
            done <<< "$(find "$dir" -type f)"
            rm -rf "$dir" "$zip"
            artifact="$(jq -n '$artifact | .files = $files' --argjson files "$files" --argjson artifact "$artifact")"
          fi
          artifacts="$(jq -n '$artifacts | .[$artifact | .name] = $artifact' --argjson artifact "$artifact" --argjson artifacts "$artifacts")"
        done <<< "$(jq -r '.artifacts[] | .name' <<< "$raw_artifacts")"

        echo "artifacts<<$eof" >> $GITHUB_OUTPUT
        jq -c '.' <<< "$artifacts" >> $GITHUB_OUTPUT
        echo "$eof" >> $GITHUB_OUTPUT
      shell: bash
